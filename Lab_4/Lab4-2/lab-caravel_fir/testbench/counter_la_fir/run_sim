#!/bin/bash

# Clean previous hex file
rm -f counter_la_fir.hex

# Compile C code using the correct riscv64 toolchain path and targeting rv32i with zicsr
/opt/homebrew/bin/riscv64-unknown-elf-gcc -Wl,--no-warn-rwx-segments -g \
    --save-temps \
    -Xlinker -Map=output.map \
    -I../../firmware \
    -march=rv32i_zicsr -mabi=ilp32 -D__vexriscv__ \
    -Wl,-Bstatic,-T,../../firmware/sections.lds,--strip-discarded \
    -ffreestanding -nostartfiles -o counter_la_fir.elf ../../firmware/crt0_vex.S ../../firmware/isr.c fir.c counter_la_fir.c

# Check if compilation was successful
if [ $? -ne 0 ]; then
    echo "Error: RISC-V GCC compilation failed."
    exit 1
fi

# Generate Verilog hex file
/opt/homebrew/bin/riscv64-unknown-elf-objcopy -O verilog counter_la_fir.elf counter_la_fir.hex

# Check if objcopy was successful
if [ $? -ne 0 ]; then
    echo "Error: RISC-V objcopy failed."
    exit 1
fi

# Generate disassembly listing
/opt/homebrew/bin/riscv64-unknown-elf-objdump -D counter_la_fir.elf > counter_la_fir.out

# Check if objdump was successful
if [ $? -ne 0 ]; then
    echo "Warning: RISC-V objdump failed."
    # Continue anyway as this is not critical
fi

# to fix flash base address
sed -ie 's/@10/@00/g' counter_la_fir.hex
cp counter_la_fir.hex counter_la_fir.modified.hex
# Compile Verilog using Icarus Verilog with SystemVerilog support
iverilog -g2012 -Ttyp -DFUNCTIONAL -DSIM -DUNIT_DELAY=#1 \
    -f./include.rtl.list -o counter_la_fir.vvp counter_la_fir_tb.v

# Check if iverilog succeeded before running vvp
if [ ! -f counter_la_fir.vvp ]; then
    echo "Error: iverilog compilation failed. Skipping vvp."
    exit 1
fi

# Run the simulation using vvp
vvp counter_la_fir.vvp

echo "Simulation finished."