SOC Design
Caravel Testbench & Lab4-2 Explained
Jiin Lai
©BOLEDU

Objectives

Understand Caravel Testbench Structure, particularly,
the relationship among
1. Firmware – the c code runs on RISC-V
2. Testbench – the verilog top module which composes
1.
2.
3.

Instance of Caravel design which includes user project
Spiflash which is loaded with firmware .hex file
Verilog code to interact with firmware/user-project through mprj pins

3. User Projects

©BOLEDU

Caravel Background Knowledge
Caravel SOC Introduction - Video
Topics
System Block Diagram
Reset POR
Management Project Area
DLL, Configuration SPI
Housekeep SPI
GPIO
SPI
Memory-mapped IO
Counter/Timer/UART
Wishbone
IRQ
SRM
User Project Interface
Testbench
Firmware

Author
Tony
Tony
Tony
Willy
Willy
Willy
Willy
Hurry
Josh
Josh
Josh
Josh
Josh
Josh

duration

Video

https://youtu.be/hbISphnvVYg

23:04
32:55

https://youtu.be/Vw3TGc-YV8E

31:36
11:37
10:26
4:56

https://youtu.be/-o87eNkqmPo
https://youtu.be/Xvk4jCB9l7U
https://youtu.be/G3oT0DJfZMk
https://youtu.be/X8sMMfrXKac

12:42

https://youtu.be/0neIx5DOK1g

Caravel SOC ppt: https://github.com/bol-edu/caravel-soc_fpga-lab/tree/main/caravel-soc-ppt

©BOLEDU

Reference - Must Study
• Firmware
• ppt: https://github.com/bol-edu/caravel-soc_fpga-lab/blob/main/caravel-socppt/caravel-intr-sram-wb-usrprj-firmware_josh.pdf

• Video:
https://www.youtube.com/watch?v=0neIx5DOK1g&list=PL5CoDA0gtOHVeF4Fk
otwDY-buLVIoeGzf&index=1&t=5s

• GPIO / MMIO
• ppt: https://github.com/bol-edu/caravel-soc_fpga-lab/blob/main/caravel-socppt/caravel-hk-gpio-spi-mmio_willy.pdf
• Video: https://youtu.be/Vw3TGc-YV8E

©BOLEDU

Caravel Harness

©BOLEDU

Caravel Simulation Verification System
Verilog Testbench
Verilog testbench
counter_la_tb.v
module counter_tb;
Initial beigin
wait(checkbits == 16’hAB40);
wait(checkbits = ..
end
Initial begin
RSB <= 1’b0;
RSB <= 1’b1;
end
caravel uut( );

Spiflash #( .FILENAME(“counter_la.hex”} spiflash ( );
tbuart tburat (
endmodule

©BOLEDU

);

Counter - WB

https://github.com/bol-edu/caravel-soc/files/11052078/caravel-soc_testbench.firmwave.pdf
©BOLEDU

Caravel Memory Map IO (defs.h)

©BOLEDU

https://github.com/bol-edu/caravel-soc/blob/main/firmware/defs.h
https://github.com/efabless/caravel/blob/main/docs/pdf/memory_map.pdf

firmware/caravel.h - MMIO

©BOLEDU

rtl/header/user_defines.v
The power-on configuration for GPIO 0 to 4 is fixed and cannot be modified
(allowing the SPI and debug to always be accessible unless overridden by a flash program)

©BOLEDU

testbench/counter_la/counter_la.c

©BOLEDU

Firmware : counter_wb (defs.h, caravel.h)
#include <defs.h>
#include <stub.c>
#define reg_mprj_slave (*(volatile uint32_t*) 0x30000000)
reg_mprj_io_31 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_30 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_29 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_28 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_27 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_26 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_25 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_24 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_23 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_22 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_21 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_20 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_19 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_18 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_17 = GPIO_MODE_MGMT_STD_OUTPUT;
reg_mprj_io_16 = GPIO_MODE_MGMT_STD_OUTPUT;

/* Apply configuration */
reg_mprj_xfer = 1;
while (reg_mprj_xfer == 1);

©BOLEDU

// Flag start of the test
reg_mprj_datal = 0xAB600000;

reg_mprj_slave = 0x00002710;
reg_mprj_datal = 0xAB610000;
if (reg_mprj_slave == 0x2B3D) {
reg_mprj_datal = 0xAB610000;
}

caravel.h
#define reg_mprj_xfer (*(volatile uint32_t*)0x26000000)
#define reg_mprj_pwr (*(volatile uint32_t*)0x26000004)
#define reg_mprj_irq (*(volatile uint32_t*)0x26100014)
#define reg_mprj_datal (*(volatile uint32_t*)0x2600000c)
#define reg_mprj_datah (*(volatile uint32_t*)0x26000010)

firmware: https://github.com/bol-edu/caravel-soc/blob/main/testbench/counter_wb/counter_wb.c
https://github.com/bol-edu/caravel-soc/blob/main/firmware/defs.h

Testbench

initial begin
wait(checkbits == 16'hAB60);
$display("Monitor: MPRJ-Logic WB Started");
wait(checkbits == 16'hAB61);
$display("Monitor: Mega-Project WB (RTL) Passed");
$finish;
end

©BOLEDU

https://github.com/bol-edu/caravel-soc/blob/main/testbench/counter_wb/counter_wb_tb.v

User Project – user_proj_example.counter.v
module: counter
module user_proj_example #(
parameter BITS = 32
)(

// WB MI A
assign valid = wbs_cyc_i && wbs_stb_i;
assign wstrb = wbs_sel_i & {4{wbs_we_i}};

// Wishbone Slave ports (WB MI A)
input wb_clk_i,
input wb_rst_i,
input wbs_stb_i,
input wbs_cyc_i,
input wbs_we_i,
input [3:0] wbs_sel_i,
input [31:0] wbs_dat_i,
input [31:0] wbs_adr_i,
output wbs_ack_o,
output [31:0] wbs_dat_o,

assign wbs_dat_o = rdata;

// Logic Analyzer Signals
input [127:0] la_data_in,
output [127:0] la_data_out,
input [127:0] la_oenb,

// LA
assign la_data_out = {{(127-BITS){1'b0}}, count};
// Assuming LA probes [63:32] are for controlling the count register
assign la_write = ~la_oenb[63:32] & ~{BITS{valid}};
// Assuming LA probes [65:64] are for controlling the count clk & reset
assign clk = (~la_oenb[64]) ? la_data_in[64]: wb_clk_i;
assign rst = (~la_oenb[65]) ? la_data_in[65]: wb_rst_i;

// IOs
input [`MPRJ_IO_PADS-1:0] io_in,
output [`MPRJ_IO_PADS-1:0] io_out,
output [`MPRJ_IO_PADS-1:0] io_oeb,

assign wdata = wbs_dat_i;
// IO

assign io_out = count;
assign io_oeb = {(`MPRJ_IO_PADS-1){rst}};
// IRQ
assign irq = 3'b000;

// Unused

always @(posedge clk) begin
if (reset) begin
count <= 0;
ready <= 0;
end else begin
ready <= 1'b0;
if (~|la_write) begin
count <= count + 1;
end
if (valid && !ready) begin
ready <= 1'b1;
rdata <= count;
if (wstrb[0]) count[7:0] <= wdata[7:0];
if (wstrb[1]) count[15:8] <= wdata[15:8];
if (wstrb[2]) count[23:16] <= wdata[23:16];
if (wstrb[3]) count[31:24] <= wdata[31:24];
end else if (|la_write) begin
count <= la_write & la_input;
end
end
end

// IRQ
output [2:0] irq
);

https://github.com/bol-edu/caravel-soc/blob/main/rtl/user/user_proj_example.counter.v
©BOLEDU

firmware

user_project

// Flag start of the test
reg_mprj_datal = 0xAB600000;
reg_mprj_slave = 0x00002710;
reg_mprj_datal = 0xAB610000;
if (reg_mprj_slave == 0x2B3D) {
reg_mprj_datal = 0xAB610000;
}

Testbench
initial begin
wait(checkbits == 16'hAB60);
$display("Monitor: MPRJ-Logic WB Started");
wait(checkbits == 16'hAB61);
$display("Monitor: Mega-Project WB (RTL) Passed");
$finish;
end
©BOLEDU

Lab 4-2 - Caravel FIR

©BOLEDU

Design Scope & Hierarchy
User project (Synthesize the User Project)
Module to design

WB Decode
WB-interface

WB-interface

WB-AXI

exmem-FIR

AXI-Lite, AXI-S

Verilog-FIR
tapRAM
(inference)

©BOLEDU

dataRAM
(inference)

bram.v
(ram_style)

RAM module provided
From previous project

fir.c in Lab4-1, Lab4-2
• Lab4-1
• fir.c calucates y[t] = Σ (h[i] * x[t - i]）
• The compiled fir.hex is loaded into bram in user-project area

• Lab4-2
• y[t] = Σ (h[i] * x[t - i] is calucated in hardware accelerator (fir.v)
• fir_control.c (let’s rename it to avoid confuse) is the firmware
• Control the hardware accelerator (fir.v)
• Communicate with testbench

©BOLEDU

RTL Design
• exmem-FIR : Use design from Lab4-1
• verilog-FIR : Use design from Lab3
• WB-AXI: Wishbone to AXI-lite, AXI-S interface conversion
• Refer to configuration address map
• If wb address is in the range 3000_0000 – 3000_007F, read/write convert to Axilite
• If wb address is 3000_0080 ( send X[n])
• write transaction converts to axi stream master to send data to verilog-FIR
• If read, return previous written X. Note every transaction has to have completion, otherwise, system hang

• If wb address is 3000_0084 ( read Y[n] )
• Read transaction, converts to axi-stream slave to read Y[n] from verilog-FIR
• Write transaction, ignore, and return ack

• WB-Decode: decode wishbone transaction address and dispatch to exmem-FIR, and WB-AXI
• Interface with user_project_example
• Address 3000_xxxx transaction sent to WB_AXI
• Address 3800_xxxx, transaction sent to exmem-FIR
©BOLEDU

Firmware: fir_control.c
0. Firmware code loaded into exmem and execute from it (refer Lab4-1)
1. Initialization code:
1.
2.

Configure mprj pin, e.g. direction (in/out), select output from risc-v or user-project …
Define mmio registers , e.g.
1.
2.
3.
4.

2.
3.

Program coeff, len by simple, e.g. reg_fir_coeff_0 = xx ….
RISC-V outputs a StartMark ‘hA5 on mprj[23:16] to notify Testbench to start latency-timer (in testbench)
1.

4.
5.
6.
7.
8.
9.
©BOLEDU

#define reg_fir_control (*(volatile uint32_t*)0x38000000)
#define reg_fir_coeff (*(volatile uint32_t*)0x38000040)
#define reg_fir_x(*(volatile uint32_t*)0x38000080)
#define reg_fir_y(*(volatile uint32_t*)0x38000084)

reg_mprj_datal = 0x00A50000;

RISC-V sends X[n] to FIR (note: make sure FIR is readily to accept X[n)) : reg_fir_x = value
RISC-V receives Y[n] from FIR (note: make sure Y[n] is ready y_value = reg_fir_y;
Repeat 3, 4, until len of Y[n] is received
When finish, write final Y (Y[7:0] output to mprj[31:24]), EndMark (‘h5A – mprj[23:16]), record the
latency-timer
Testbench check correctness by checking mprj[31:24], and print out the latency-timer.
Repeat 2 – 7 for three times, and record and add up the latency timer

Test Data
• Due to Caravel SOC has only limited data memory, and there is no file system for the data
file.
• The tap parameters is defined in the program code (Global data)
int[10:0] tap = {tap0, tap1, tap2, … };
• The data set is generated by RISC-V program. Using the following loop to generate X[n] data_length = 64

// Design your own sequence – area for optimization
for(n = 0; n < data_length; n++) {
x[n] = n;
// send x[n] to FIR
// receive y[n] from FIR
}
©BOLEDU

Configuration Register Address map (Suggested)
User Project Memory Starting: 3800_0000
User Project FIR Base Address : 3000_0000
0x00 –

[0] - ap_start (r/w)
set, when ap_start signal assert
reset, when start data transfer, i.e. 1st axi-stream data come in
[1] – ap_done (ro) -> when FIR process all the dataset, i.e. receive tlast and last Y generated/transferred
[2] – ap_idle (ro) -> indicate FIR is actively processing data
[3] – Reserved (ro) -> read zero
[4] – X[n]_ready to accept input (ro) -> X[n] is ready to accept input.
[5] - Y[n] is ready to read -> set when Y[n] is ready, reset when 0x00 is read

0x10-14 - data-length
0x40-7F – Tap parameters, (e.g., 0x20-24 Tap0, in sequence …
0x80-83 – X[n] input (r/w)
0x84-87 – Y[n] output (ro)
©BOLEDU

